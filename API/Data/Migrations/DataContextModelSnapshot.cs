// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("API.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1,
                            AnswerText = "Gode kollega",
                            QuestionId = 1,
                            UserId = 2
                        },
                        new
                        {
                            AnswerId = 2,
                            AnswerText = "matematikk :) ",
                            QuestionId = 3,
                            UserId = 3
                        },
                        new
                        {
                            AnswerId = 3,
                            AnswerText = "for lite ferie :) ",
                            QuestionId = 2,
                            UserId = 4
                        },
                        new
                        {
                            AnswerId = 4,
                            AnswerText = "for mye teori :) ",
                            QuestionId = 4,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("API.Models.AppRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Mentor"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Student"
                        });
                });

            modelBuilder.Entity("API.Models.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Description = "I'm admin",
                            FirstName = "Admin",
                            Gender = "Female",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 65, 81, 65, 65, 65, 65, 73, 65, 65, 89, 97, 103, 65, 65, 65, 65, 69, 74, 53, 86, 72, 48, 101, 87, 82, 104, 80, 77, 99, 66, 121, 103, 114, 74, 50, 75, 73, 113, 100, 43, 53, 55, 48, 110, 85, 84, 85, 72, 77, 86, 53, 118, 53, 66, 114, 56, 86, 82, 85, 100, 107, 110, 102, 97, 117, 109, 104, 66, 97, 70, 83, 109, 105, 49, 48, 102, 88, 69, 108, 115, 79, 81, 61, 61 },
                            PasswordSalt = new byte[0],
                            PhotoUrl = "",
                            UserName = "Admin@gmail.com"
                        },
                        new
                        {
                            UserId = 2,
                            Description = "mentor description...",
                            FirstName = "Mentor1",
                            Gender = "Male",
                            LastName = "ment1",
                            PasswordHash = new byte[] { 65, 81, 65, 65, 65, 65, 73, 65, 65, 89, 97, 103, 65, 65, 65, 65, 69, 76, 57, 72, 52, 67, 53, 104, 70, 85, 110, 69, 111, 113, 43, 101, 107, 65, 50, 72, 49, 113, 116, 70, 82, 118, 85, 52, 107, 53, 99, 56, 70, 89, 114, 120, 89, 52, 57, 104, 111, 50, 79, 115, 116, 99, 86, 100, 105, 107, 67, 99, 74, 52, 121, 83, 52, 70, 76, 86, 89, 109, 74, 86, 86, 65, 61, 61 },
                            PasswordSalt = new byte[0],
                            PhotoUrl = "https://picsum.photos/200",
                            UserName = "mentor1@gmail.com"
                        },
                        new
                        {
                            UserId = 3,
                            Description = "stud description,",
                            FirstName = "Student1",
                            Gender = "Male",
                            LastName = "stud1VGS",
                            PasswordHash = new byte[] { 65, 81, 65, 65, 65, 65, 73, 65, 65, 89, 97, 103, 65, 65, 65, 65, 69, 73, 110, 116, 52, 110, 70, 68, 107, 65, 120, 57, 57, 117, 97, 84, 73, 100, 87, 52, 50, 54, 81, 100, 98, 115, 99, 118, 85, 88, 118, 65, 89, 66, 97, 74, 103, 54, 118, 122, 87, 88, 90, 84, 109, 57, 78, 75, 111, 51, 99, 119, 114, 97, 113, 81, 65, 114, 110, 67, 118, 122, 48, 100, 120, 65, 61, 61 },
                            PasswordSalt = new byte[0],
                            PhotoUrl = "https://picsum.photos/200",
                            UserName = "student1@gmail.com"
                        },
                        new
                        {
                            UserId = 4,
                            Description = "mentor description...",
                            FirstName = "Mentor2",
                            Gender = "Female",
                            LastName = "ment2",
                            PasswordHash = new byte[] { 65, 81, 65, 65, 65, 65, 73, 65, 65, 89, 97, 103, 65, 65, 65, 65, 69, 71, 86, 57, 118, 116, 43, 88, 77, 83, 120, 97, 109, 83, 104, 52, 117, 66, 82, 56, 97, 99, 49, 103, 122, 52, 78, 90, 47, 49, 121, 68, 116, 113, 108, 89, 103, 120, 103, 83, 79, 76, 74, 73, 84, 76, 77, 49, 51, 72, 89, 101, 98, 68, 119, 52, 117, 74, 112, 106, 83, 98, 104, 111, 102, 81, 61, 61 },
                            PasswordSalt = new byte[0],
                            PhotoUrl = "https://picsum.photos/200",
                            UserName = "mentor2@gmail.com"
                        },
                        new
                        {
                            UserId = 5,
                            Description = "stud description",
                            FirstName = "Student2",
                            Gender = "Male",
                            LastName = "studVGS2",
                            PasswordHash = new byte[] { 65, 81, 65, 65, 65, 65, 73, 65, 65, 89, 97, 103, 65, 65, 65, 65, 69, 67, 114, 114, 88, 89, 102, 117, 53, 114, 90, 53, 73, 119, 121, 100, 51, 54, 120, 71, 87, 69, 113, 76, 112, 69, 113, 110, 66, 116, 77, 90, 90, 102, 66, 121, 84, 53, 74, 99, 43, 101, 66, 48, 98, 55, 87, 56, 85, 97, 118, 122, 97, 87, 70, 112, 112, 73, 122, 57, 116, 108, 69, 119, 101, 65, 61, 61 },
                            PasswordSalt = new byte[0],
                            PhotoUrl = "https://picsum.photos/200",
                            UserName = "student2@gmail.com"
                        });
                });

            modelBuilder.Entity("API.Models.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DegreeId");

                    b.ToTable("Degrees");

                    b.HasData(
                        new
                        {
                            DegreeId = 1,
                            DegreeName = "VGS"
                        },
                        new
                        {
                            DegreeId = 2,
                            DegreeName = "Bachelor degree"
                        },
                        new
                        {
                            DegreeId = 3,
                            DegreeName = "Masters degree"
                        },
                        new
                        {
                            DegreeId = 4,
                            DegreeName = "Phd"
                        });
                });

            modelBuilder.Entity("API.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DegreeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudyCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EducationId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("UserId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            EducationId = 1,
                            DegreeId = 1,
                            EndDate = new DateTime(2025, 1, 21, 22, 38, 47, 495, DateTimeKind.Local).AddTicks(8045),
                            SchoolName = "school-name",
                            StartDate = new DateTime(2025, 1, 21, 22, 38, 47, 492, DateTimeKind.Local).AddTicks(445),
                            StudyCity = "Oslo",
                            UserId = 2
                        },
                        new
                        {
                            EducationId = 2,
                            DegreeId = 2,
                            EndDate = new DateTime(2025, 1, 21, 22, 38, 47, 495, DateTimeKind.Local).AddTicks(9747),
                            SchoolName = "school-name",
                            StartDate = new DateTime(2025, 1, 21, 22, 38, 47, 495, DateTimeKind.Local).AddTicks(9729),
                            StudyCity = "Bergen",
                            UserId = 3
                        },
                        new
                        {
                            EducationId = 3,
                            DegreeId = 3,
                            EndDate = new DateTime(2025, 1, 21, 22, 38, 47, 495, DateTimeKind.Local).AddTicks(9756),
                            SchoolName = "school-name",
                            StartDate = new DateTime(2025, 1, 21, 22, 38, 47, 495, DateTimeKind.Local).AddTicks(9754),
                            StudyCity = "Stavanger",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("API.Models.FieldOfInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FieldOfInterests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Technology"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Health"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Politics"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Social science"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Hospitality"
                        });
                });

            modelBuilder.Entity("API.Models.Industry", b =>
                {
                    b.Property<int>("IndustryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IndustryId");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            IndustryId = 1,
                            IndustryName = "Barn, skole og undervisning"
                        },
                        new
                        {
                            IndustryId = 2,
                            IndustryName = "Bygg og anlegg"
                        },
                        new
                        {
                            IndustryId = 4,
                            IndustryName = "Helse og omsorg"
                        },
                        new
                        {
                            IndustryId = 5,
                            IndustryName = "Industri og produksjon"
                        },
                        new
                        {
                            IndustryId = 6,
                            IndustryName = "Konsulent og rådgiving"
                        },
                        new
                        {
                            IndustryId = 7,
                            IndustryName = "IT"
                        },
                        new
                        {
                            IndustryId = 8,
                            IndustryName = "Kraft og energi"
                        },
                        new
                        {
                            IndustryId = 9,
                            IndustryName = "Maritim og offshoe"
                        },
                        new
                        {
                            IndustryId = 10,
                            IndustryName = "Offentelig administrasjon"
                        },
                        new
                        {
                            IndustryId = 11,
                            IndustryName = "Transport og logistikk"
                        });
                });

            modelBuilder.Entity("API.Models.Interest", b =>
                {
                    b.Property<int>("InterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldOfInterestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InterestName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("InterestId");

                    b.HasIndex("FieldOfInterestId");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            InterestId = 1,
                            FieldOfInterestId = 1,
                            InterestName = "IT"
                        },
                        new
                        {
                            InterestId = 2,
                            FieldOfInterestId = 2,
                            InterestName = "Nurse"
                        },
                        new
                        {
                            InterestId = 3,
                            FieldOfInterestId = 3,
                            InterestName = "Public policy"
                        },
                        new
                        {
                            InterestId = 4,
                            FieldOfInterestId = 4,
                            InterestName = "Social work"
                        },
                        new
                        {
                            InterestId = 5,
                            FieldOfInterestId = 5,
                            InterestName = "Hotel managment"
                        });
                });

            modelBuilder.Entity("API.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            QuestionText = "Hva er den beste med jobben din?"
                        },
                        new
                        {
                            QuestionId = 2,
                            QuestionText = "Hva er den verste med jobben din, og Hvorfor?"
                        },
                        new
                        {
                            QuestionId = 3,
                            QuestionText = "Hvilket fag er du mest glad i?"
                        },
                        new
                        {
                            QuestionId = 4,
                            QuestionText = "Hvilket fag er du mest IKKE glad i, og Hvorfor?"
                        });
                });

            modelBuilder.Entity("API.Models.UserInterest", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InterestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("UserInterests");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            InterestId = 1
                        },
                        new
                        {
                            UserId = 3,
                            InterestId = 2
                        },
                        new
                        {
                            UserId = 4,
                            InterestId = 3
                        },
                        new
                        {
                            UserId = 5,
                            InterestId = 4
                        });
                });

            modelBuilder.Entity("API.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            RoleId = 3,
                            UserId = 3
                        },
                        new
                        {
                            RoleId = 2,
                            UserId = 4
                        },
                        new
                        {
                            RoleId = 3,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("API.Models.WorkExperience", b =>
                {
                    b.Property<int>("WorkExpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IndustryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Jobtitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkExpId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkExperiences");

                    b.HasData(
                        new
                        {
                            WorkExpId = 1,
                            CompanyName = "Avonova Norge",
                            IndustryId = 1,
                            Jobtitle = "job-title",
                            UserId = 3
                        },
                        new
                        {
                            WorkExpId = 2,
                            CompanyName = "Innovation Norge",
                            IndustryId = 2,
                            Jobtitle = "job-title",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("API.Models.Answer", b =>
                {
                    b.HasOne("API.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AppUser", "AppUser")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("API.Models.Education", b =>
                {
                    b.HasOne("API.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AppUser", "AppUser")
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Degree");
                });

            modelBuilder.Entity("API.Models.Interest", b =>
                {
                    b.HasOne("API.Models.FieldOfInterest", "FieldOfInterest")
                        .WithMany("Interests")
                        .HasForeignKey("FieldOfInterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldOfInterest");
                });

            modelBuilder.Entity("API.Models.UserInterest", b =>
                {
                    b.HasOne("API.Models.Interest", "Interest")
                        .WithMany("UserInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AppUser", "AppUser")
                        .WithMany("UserInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Interest");
                });

            modelBuilder.Entity("API.Models.UserRole", b =>
                {
                    b.HasOne("API.Models.AppRole", "AppRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AppUser", "AppUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("API.Models.WorkExperience", b =>
                {
                    b.HasOne("API.Models.Industry", "Indudtry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AppUser", "AppUser")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Indudtry");
                });

            modelBuilder.Entity("API.Models.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Models.AppUser", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Educations");

                    b.Navigation("Roles");

                    b.Navigation("UserInterests");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("API.Models.FieldOfInterest", b =>
                {
                    b.Navigation("Interests");
                });

            modelBuilder.Entity("API.Models.Interest", b =>
                {
                    b.Navigation("UserInterests");
                });
#pragma warning restore 612, 618
        }
    }
}
