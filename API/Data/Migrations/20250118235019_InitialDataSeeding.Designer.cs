// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250118235019_InitialDataSeeding")]
    partial class InitialDataSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("API.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AppUserUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnswerId");

                    b.HasIndex("AppUserUserId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("API.Models.AppRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Mentor"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Student"
                        });
                });

            modelBuilder.Entity("API.Models.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Description = "",
                            FirstName = "",
                            Gender = "",
                            LastName = "",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhotoUrl = "",
                            UserName = "test1@gmail.com"
                        },
                        new
                        {
                            UserId = 2,
                            Description = "",
                            FirstName = "",
                            Gender = "",
                            LastName = "",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhotoUrl = "",
                            UserName = "test2@gmail.com"
                        },
                        new
                        {
                            UserId = 3,
                            Description = "",
                            FirstName = "",
                            Gender = "",
                            LastName = "",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhotoUrl = "",
                            UserName = "test3@gmail.com"
                        },
                        new
                        {
                            UserId = 4,
                            Description = "",
                            FirstName = "",
                            Gender = "",
                            LastName = "",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhotoUrl = "",
                            UserName = "test4@gmail.com"
                        },
                        new
                        {
                            UserId = 5,
                            Description = "",
                            FirstName = "",
                            Gender = "",
                            LastName = "",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhotoUrl = "",
                            UserName = "test5@gmail.com"
                        });
                });

            modelBuilder.Entity("API.Models.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DegreeId");

                    b.ToTable("Degree");
                });

            modelBuilder.Entity("API.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DegreeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MentorUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudyCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EducationId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("MentorUserId");

                    b.HasIndex("StudentId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("API.Models.FieldOfInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FieldOfInterests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Technology"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Health"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Politics"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Social science"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Hospitality"
                        });
                });

            modelBuilder.Entity("API.Models.Industry", b =>
                {
                    b.Property<int>("IndustryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IndustryId");

                    b.ToTable("Industry");
                });

            modelBuilder.Entity("API.Models.Interest", b =>
                {
                    b.Property<int>("InterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldOfInterestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InterestName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("InterestId");

                    b.HasIndex("FieldOfInterestId");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            InterestId = 1,
                            FieldOfInterestId = 1,
                            InterestName = "IT"
                        },
                        new
                        {
                            InterestId = 2,
                            FieldOfInterestId = 2,
                            InterestName = "Nurse"
                        },
                        new
                        {
                            InterestId = 3,
                            FieldOfInterestId = 3,
                            InterestName = "Public policy"
                        },
                        new
                        {
                            InterestId = 4,
                            FieldOfInterestId = 4,
                            InterestName = "Social work"
                        },
                        new
                        {
                            InterestId = 5,
                            FieldOfInterestId = 5,
                            InterestName = "Hotel managment"
                        });
                });

            modelBuilder.Entity("API.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("API.Models.UserInterest", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InterestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("UserInterests");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            InterestId = 1
                        },
                        new
                        {
                            UserId = 3,
                            InterestId = 2
                        },
                        new
                        {
                            UserId = 4,
                            InterestId = 3
                        },
                        new
                        {
                            UserId = 5,
                            InterestId = 4
                        });
                });

            modelBuilder.Entity("API.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            RoleId = 3,
                            UserId = 3
                        },
                        new
                        {
                            RoleId = 2,
                            UserId = 4
                        },
                        new
                        {
                            RoleId = 3,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("API.Models.WorkExperience", b =>
                {
                    b.Property<int>("WorkExpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IndudtryIndustryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Jobtitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MentorUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkExpId");

                    b.HasIndex("IndudtryIndustryId");

                    b.HasIndex("MentorUserId");

                    b.ToTable("WorkExperience");
                });

            modelBuilder.Entity("API.Models.Mentor", b =>
                {
                    b.HasBaseType("API.Models.AppUser");

                    b.HasDiscriminator().HasValue("Mentor");
                });

            modelBuilder.Entity("API.Models.Student", b =>
                {
                    b.HasBaseType("API.Models.AppUser");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("API.Models.Answer", b =>
                {
                    b.HasOne("API.Models.AppUser", "AppUser")
                        .WithMany("Answers")
                        .HasForeignKey("AppUserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("API.Models.Education", b =>
                {
                    b.HasOne("API.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Mentor", null)
                        .WithMany("Educations")
                        .HasForeignKey("MentorUserId");

                    b.HasOne("API.Models.Student", "Student")
                        .WithMany("Educations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("API.Models.Interest", b =>
                {
                    b.HasOne("API.Models.FieldOfInterest", "FieldOfInterest")
                        .WithMany("Interests")
                        .HasForeignKey("FieldOfInterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldOfInterest");
                });

            modelBuilder.Entity("API.Models.UserInterest", b =>
                {
                    b.HasOne("API.Models.Interest", "Interest")
                        .WithMany("UserInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AppUser", "AppUser")
                        .WithMany("UserInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Interest");
                });

            modelBuilder.Entity("API.Models.UserRole", b =>
                {
                    b.HasOne("API.Models.AppRole", "AppRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AppUser", "AppUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("API.Models.WorkExperience", b =>
                {
                    b.HasOne("API.Models.Industry", "Indudtry")
                        .WithMany()
                        .HasForeignKey("IndudtryIndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Mentor", "Mentor")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("MentorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indudtry");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("API.Models.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Models.AppUser", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Roles");

                    b.Navigation("UserInterests");
                });

            modelBuilder.Entity("API.Models.FieldOfInterest", b =>
                {
                    b.Navigation("Interests");
                });

            modelBuilder.Entity("API.Models.Interest", b =>
                {
                    b.Navigation("UserInterests");
                });

            modelBuilder.Entity("API.Models.Mentor", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("API.Models.Student", b =>
                {
                    b.Navigation("Educations");
                });
#pragma warning restore 612, 618
        }
    }
}
